}
enq(1)
enq(1)
enq(3)
enq(5)
print(deq())
print(size)
enq(5)
print(size)
### 장점
#### 데이터를 외부에서 직접 접근 불가
#### 사전에 정의된 함수로만 다룰 수 있음
#### 함수의 내부구조나 데이터 구조를 마음대로 바꿀 수 있음
## 1.큐
### FIFO(First In First Out) 방식의 자료구조
### 여러 값이 있을 때 제일 앞의 값이 처리되고 새로 입력된 값은 맨뒤에서 기다리는 구조
### Enqueue : 줄의 맨 뒤에 데이터 추가
### Dequeue : 줄의 맨 앞에 데이터 가져옴
### Size : 줄의 길이
que <- c()
que_size <- 0
size <- function() {
return(que_size)
}
print(size)
enq(1)
enq(3)
enq(5)
print(size)
print(deq())
print(deq())
print(size())
print(size())
print(deq())
print(deq())
print(size())
enq(1)
que <- c(que,7)
print(size())
deq()
deq()
size()
### que라는 변수가 전역으로 선언되 있어 이 함수를 거치지 않고 외부에서 데이터 조작 가능
### 데이터 무결성 깨질 수 있음
## 2.큐 모듈작성
q <- function() {
que <- c()
que_size <-0
enq <- function(num){
que <<- c(que, num)
que_size <<- que_size + 1
}
deq <- function() {
number <- que[1]
que <<- que[-1]
que_size <<- que_size -1
return(number)
}
size <- function() {
return(que_size)
}
return(list (enq = enq, deq=deq, size=size))
}
install.packages("rJava")
install.packages("multilinguer")
install.packages(c("stringr", "hash", "tau","Sejong","RSQLite","devtools"), type = "binary")
install.packages("remotes")
remotes::install_github("haven-jeon/KoNLP", upgrade = "never", INSTALL_opts = c("--no-multiarch"))
library(KoNLP)
library(KoNLP)
library(ggplot2)
library(ggplot2)
library(ggmap)
library(stringr)
library(dplyr)
extractNoun("테스트 입니다.")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("multilinguer")
install.packages(c("stringr", "hash", "tau","Sejong","RSQLite","devtools"), type = "binary")
install.packages("remotes")
remotes::install_github("haven-jeon/KoNLP", upgrade = "never", INSTALL_opts = c("--no-multiarch"))
library(KoNLP)
library(KoNLP)
library(ggplot2)
library(ggplot2)
library(ggmap)
library(stringr)
library(dplyr)
extractNoun("테스트 입니다.")
f = file("news.txt", blocking = F)
f = file("news.txt", blocking = F)
txtLines = readLines(f)
nonus = sapply(txtLines, extractNoun, USE.NAMES = F)
head(unlist(nonus), 20)
write(unlist(nonus), "news-1.txt")
revised = read.table("news-1.txt")
nrow(revised)
wordcount = table(revised)
length(wordcount)
head(sort(wordcount, decreasing = T), 10)
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
pal = brewer.pal(9, "Set1")
x11()
install.packages("rJava")
install.packages("multilinguer")
install.packages(c("stringr", "hash", "tau","Sejong","RSQLite","devtools"), type = "binary")
install.packages("remotes")
remotes::install_github("haven-jeon/KoNLP", upgrade = "never", INSTALL_opts = c("--no-multiarch"))
library(KoNLP)
library(ggplot2)
install.packages("rJava")
wordcloud(names(wordcount), freq = wordcount, scale = c(5, 1), rot.per = 0.25, min.freq = 1, random.order = F, random.color = T, colors = pal)
library(wordcloud)
library(RColorBrewer)
pal = brewer.pal(9, "Set1")
x11()
x11()
extractNoun("테스트 입니다.")
install.packages("rJava")
install.packages("multilinguer")
install.packages(c("stringr", "hash", "tau","Sejong","RSQLite","devtools"), type = "binary")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("haven-jeon/KoNLP", upgrade = "never", INSTALL_opts = c("--no-multiarch"))
library(KoNLP)
library(ggplot2)
library(ggmap)
library(stringr)
library(dplyr)
extractNoun("테스트 입니다.")
f = file("news.txt", blocking = F)
txtLines = readLines(f)
nonus = sapply(txtLines, extractNoun, USE.NAMES = F)
head(unlist(nonus), 20)
write(unlist(nonus), "news-1.txt")
revised = read.table("news-1.txt")
nrow(revised)
wordcount = table(revised)
length(wordcount)
head(sort(wordcount, decreasing = T), 10)
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
pal = brewer.pal(9, "Set1")
x11()
wordcloud(names(wordcount), freq = wordcount, scale = c(5, 1), rot.per = 0.25, min.freq = 1, random.order = F, random.color = T, colors = pal)
getwd()
## 3.큐 모듈 사용
### queue() 함수 호출 시 만들어지는 queue() 내부의 지역변수 que와 que_size가 생성되는 공간은 queue() 함수를 호출 할 때 마다 매번 새로 생성
### queue()를 여러 개 만들어 사용해도 데이터가 섞이지 않음
que <- queue()
a <- queue()
que$enqueue(3)
a$size()
### que라는 변수가 전역으로 선언되 있어 이 함수를 거치지 않고 외부에서 데이터 조작 가능
### 데이터 무결성 깨질 수 있음
## 2.큐 모듈작성
q <- function() {
que <- c()
que_size <-0
enq <- function(num){
que <<- c(que, num)
que_size <<- que_size + 1
}
deq <- function() {
number <- que[1]
que <<- que[-1]
que_size <<- que_size -1
return(number)
}
size <- function() {
return(que_size)
}
return(list (enq = enq, deq=deq, size=size))
}
## 3.큐 모듈 사용
### queue() 함수 호출 시 만들어지는 queue() 내부의 지역변수 que와 que_size가 생성되는 공간은 queue() 함수를 호출 할 때 마다 매번 새로 생성
### queue()를 여러 개 만들어 사용해도 데이터가 섞이지 않음
que <- queue()
## 3.큐 모듈 사용
### queue() 함수 호출 시 만들어지는 queue() 내부의 지역변수 que와 que_size가 생성되는 공간은 queue() 함수를 호출 할 때 마다 매번 새로 생성
### queue()를 여러 개 만들어 사용해도 데이터가 섞이지 않음
que <- queue()
a <- queue()
que$enqueue(3)
a$size()
## 3.큐 모듈 사용
### queue() 함수 호출 시 만들어지는 queue() 내부의 지역변수 que와 que_size가 생성되는 공간은 queue() 함수를 호출 할 때 마다 매번 새로 생성
### queue()를 여러 개 만들어 사용해도 데이터가 섞이지 않음
que <- que()
a <- que()
que$enq(3)
a$size()
### que라는 변수가 전역으로 선언되 있어 이 함수를 거치지 않고 외부에서 데이터 조작 가능
### 데이터 무결성 깨질 수 있음
## 2.큐 모듈작성
q <- function() {
que <- c()
que_size <-0
enq <- function(num){
que <<- c(que, num)
que_size <<- que_size + 1
}
deq <- function() {
number <- que[1]
que <<- que[-1]
que_size <<- que_size -1
return(number)
}
size <- function() {
return(que_size)
}
return(list (enq = enq, deq=deq, size=size))
}
## 3.큐 모듈 사용
### queue() 함수 호출 시 만들어지는 queue() 내부의 지역변수 que와 que_size가 생성되는 공간은 queue() 함수를 호출 할 때 마다 매번 새로 생성
### queue()를 여러 개 만들어 사용해도 데이터가 섞이지 않음
que <- queue()
a <- queue()
que$enqueue(3)
a$size()
a$enqueue(5)
que$dequeue()
que$size()
a$size()
## 3.큐 모듈 사용
### queue() 함수 호출 시 만들어지는 queue() 내부의 지역변수 que와 que_size가 생성되는 공간은 queue() 함수를 호출 할 때 마다 매번 새로 생성
### queue()를 여러 개 만들어 사용해도 데이터가 섞이지 않음
install.packages("collections")
library(collections)
que <- queue()
a <- queue()
que$enqueue(3)
a$size()
a$enqueue(5)
que$dequeue()
a$dequeue()
que$size()
a$size()
# 1.데이터 조작1
## 1.아이리스 데이터
head(iris)
str(iris)
### 1.데이터 사용
data(mtcars)
head(mtcars)
### csv파일 입출력
setwd("C:\Yoongit\R_Language\R_Studio\Day02\")
### csv파일 입출력
setwd("C:/Yoongit/R_Language/R_Studio/Day02/")
(x<-read.csv("iris.csv",header = T))
(x<-read.csv("wifi.csv",header = T))
### csv파일 입출력
setwd("C:/Yoongit/R_Language/R_Studio/Day02/")
(x<-read.csv("wifi.csv",header = T))
(x<-read.csv("wifi.csv",header = F))
(x<-read.csv("wifi.csv",header = T))
str(x)
(x<-read.csv("wifi.csv",header = T))
### csv파일 입출력
setwd("C:/Yoongit/R_Language/R_Studio/Day02/")
(x<-read.csv("score.csv",header = T))
str(x)
(x<-read.csv("score.csv",header = T))
str(x)
(x<-read.csv("score-2.csv"))
names(x)<-c("id","name","score")
x
str(x)
x$name<-as.character(x$name)
str(x)
x<-read.csv("score.csv", stringsAsFactors = F)
str(x)
### 2.객체의 파일 입출력력
a<-1:10
b<-10:20
save(a,b,file = "ab.RData")
rm(list=ls())
a<-1:10
b<-10:20
c<-20:30
save(list = ls(),file = "abd.RData")
rm(list=ls())
ls()
load("abd.RData")
a
b
c
### 3. 행과 컬럼 합치기
rm(list=ls())
### 3. 행과 컬럼 합치기
rbind(c(1,3,5), c(2,4,6))
cbind(c(1,3,5), c(2,4,6))
## 4.apply 계열 함수
### 1.apply()
x<-matrix(1:10, ncol=2)
x
apply(x,1,sum)
apply(x,2,sum)
### 2.lapply()
lapply(mtcars[,1:4],mean)
str(mtcars)
### 3.sapply() lapply와 유사하지만 리스트대신 결과를 벡터 또는 행렬로 반환
sapply(mtcars[,1:4],mean)
class(sapply(mtcars[,1:4],mean))
#컬럼이 어떤 데이터 타입인지 한번에 확인하기에 응용
sapply(mtcars, class)
### 4.tapply() 그룹별로 함수를 적용하기 위한 함수
tapply(1:15, rep(1,15),sum)
tapply(1:15, 1:15 %% 2 == 0, sum)
### 5.mapply() 여러 데이터를 함수의 인자로 적용
mapply(mean,mtcarsp[,1:4])
### 5.mapply() 여러 데이터를 함수의 인자로 적용
mapply(mean,mtcars[,1:4])
library(KoNLP)
library(ggplot2)
library(ggmap)
library(stringr)
library(dplyr)
extractNoun("테스트 입니다.")
f = file("news.txt", blocking = F)
txtLines = readLines(f)
nonus = sapply(txtLines, extractNoun, USE.NAMES = F)
head(unlist(nonus), 20)
write(unlist(nonus), "news-1.txt")
revised = read.table("news-1.txt")
nrow(revised)
wordcount = table(revised)
length(wordcount)
head(sort(wordcount, decreasing = T), 10)
install.packages("wordcloud")
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
pal = brewer.pal(9, "Set1")
x11()
wordcloud(names(wordcount), freq = wordcount, scale = c(5, 1), rot.per = 0.25, min.freq = 1, random.order = F, random.color = T, colors = pal)
## 5.데이터를 그룹으로 묶은 후 함수 호출하기
### 1.summary()
summary(mtcars)
### 2.quantile() 수치형 자료의 분포
quantile(mtcars$mpg)
quantile(mtcars$mpg,seq(0,1,by=0.15))
### 3.summaryBy() 원하는 컬럼의 값을 특정 조건에 따라 요약하는 목적으로 사용
summaryBy(age+circumference~Tree,Ornage)
### 3.summaryBy() 원하는 컬럼의 값을 특정 조건에 따라 요약하는 목적으로 사용
install.packages("doBy")
### 3.summaryBy() 원하는 컬럼의 값을 특정 조건에 따라 요약하는 목적으로 사용
library(doBy)
summaryBy(age+circumference~Tree,Ornage)
summaryBy(age+circumference~Tree,Orange)
# age + circumference ∼ Tree 은 formula라고 하는데, 데이터를 일종의 수식으로 푯현하는 방법
# 이 예에서는 age와 circumference 를 +로 연결해 이 두가지에대한 값을 차례로 컬럼으로 놓고, 각 행에는 Tree를 배열하기위해 ∼Tree를 붙임
# 위 결과는 age, circumference를 Tree별료 요약한 예제
### 4.orderBy() 데이터를 정렬하기 위한 목적으로 사용
orderBy(~age, Orange)
#모든 데이터를 age, circumference 순으로 정렬한 예
orderBy(~age+circumference, Orange)
# 먼저 age 순으로 정렬되고 그 안에서 circumference 로 정렬
### 5.sample() 주어진 데이터에서 임의로 샘플을 추출하는 목적으로 사용
### 중복을 허용하거나 허용하지 않고 샘플을 추출할 수 있음
### 중복을 허용하려면 replace=TRUE를 지정
sample(1:20, 10)
sample(1:20,10,replace = TRUE)
sample(1:20,10,replace = FALSE)
### 흥미로운 사용방법은 데이터를 무작위로 섞는데 사용
sample(1:20, 20)
### NROW()는 주어진 데이터 프레임 또는 벡터의 행의 수 또는 길이를 반환하는 함수
Orange[sample(NROW(Orange), NROW(Orange)),]
### 샘플링은 데이터의 무작위 재배열 보다는 주어진 데이터에서 일부를 training data, 일부를 validation data(또는 test data) 로 분ㄹ리하는데 더 유용
### 보통은 주어진 데이터에서 각 Tree 마다 10% 씩을 뽑아서test data로 활용하고 싶은 경우 사용
sampleBy(~Tree,frac = 0.1, data =Orange)
## 6.데이터 분리 및 병합
### 1. split()
### 데이터를 분리 하는데 사용
split(Orange, Orange$Tree)
### lapply()를 적용해서 Orange의 Tree별 circumference의 편균을 구할 수 있음
lapply(split(Orange$circumference, Orange$Tree), mean)
### 2. subset()
### subset()은 split()과 유사하지만 전체를 부분으로 구분하는 다른 조건을 만족하는 부분만 원할 때 사용
subset(Orange, Tree==1)
### 벡터간 연산에서의 AND는 &&가 아니라 &를 사용
subset(Orange, Tree==1 & age > 3)
### Tree=1인 값에서 age가 3 이상인 행을 추출
### subset에 select인자를 지정하면 특정 열을 선택하거나 제외
subset(Orange, select = c(Tree, age))
### 특정 열을 제외하고자 한다면 '-' 를 열이름 앞에 붙임
subset(Orange, select=-c(Tree))
### 3.merge()
### 데이터 프레임을 공통된 값을 기준으로 묶는 함수
### 데이터 베이스에서 join과 같은 역할
a <- data.frame(name=c("x", "y", "Z"), weight=c(50,55, 60))
b <- data.frame(name=c("y", "z", "x"), height=c(150,160,170))
merge(a,b)
### 3.merge()
### 데이터 프레임을 공통된 값을 기준으로 묶는 함수
### 데이터 베이스에서 join과 같은 역할
a <- data.frame(name=c("x", "y", "z"), weight=c(50,55, 60))
b <- data.frame(name=c("y", "z", "x"), height=c(150,160,170))
merge(a,b)
rm(list=ls())
cbind(a,b)
### 4.cbind()
### 단순히 열을 합치는 함수
a <- data.frame(name=c("x", "y", "z"), weight=c(50,55, 60))
b <- data.frame(name=c("y", "z", "x"), height=c(150,160,170))
cbind(a,b)
###공통된 이름이 없는 경우 NA로 채우면서 전체 데이터를 모두 합치려면 all 인자에 TRUE를 지정
a <- data.frame(name=c("x", "y", "z"), weight=c(50,55, 60))
b <- data.frame(name=c("y", "z", "x"), height=c(150,160,170))
merge(a,b,all = T)
###공통된 이름이 없는 경우 NA로 채우면서 전체 데이터를 모두 합치려면 all 인자에 TRUE를 지정
a <- data.frame(name=c("x", "y", "z"), weight=c(50,55, 60))
b <- data.frame(name=c("y", "r", "x"), height=c(150,160,170))
merge(a,b,all = T)
### 5.sort()
### 주어진 데이터를 직접 정렬해주는 함수
num<-c(71,85,24,9,13)
sort(num,decreasing = T)
num
### 2.order()
### 주어진 인자를 정렬하기 위한 각 요소의 색인 반환
### decreasing=T 설정시 내림차순 결과를 반환
num
order(num)
order(num, decreasing = T)
### 1.with()
### 데이터 프레임 또는 리스트 내 필드를 필드 이름만으로 접근할 수 있게 함
### 기존에 Orange$age, Orange$circumference 형태로 적어야 했던 코드를 간단하게 필드 이름으로 접근 가능
with(Ornage. {
### 1.with()
### 데이터 프레임 또는 리스트 내 필드를 필드 이름만으로 접근할 수 있게 함
### 기존에 Orange$age, Orange$circumference 형태로 적어야 했던 코드를 간단하게 필드 이름으로 접근 가능
with(Ornage. {
### 1.with()
### 데이터 프레임 또는 리스트 내 필드를 필드 이름만으로 접근할 수 있게 함
### 기존에 Orange$age, Orange$circumference 형태로 적어야 했던 코드를 간단하게 필드 이름으로 접근 가능
with(Ornage. {
### 1.with()
### 데이터 프레임 또는 리스트 내 필드를 필드 이름만으로 접근할 수 있게 함
### 기존에 Orange$age, Orange$circumference 형태로 적어야 했던 코드를 간단하게 필드 이름으로 접근 가능
with(Ornage, {
print(mean(age))
print(mean(circumfrence))
})
### 1.with()
### 데이터 프레임 또는 리스트 내 필드를 필드 이름만으로 접근할 수 있게 함
### 기존에 Orange$age, Orange$circumference 형태로 적어야 했던 코드를 간단하게 필드 이름으로 접근 가능
with(Ornage, {
print(mean(age))
print(mean(circumfrence))
})
### 1.with()
### 데이터 프레임 또는 리스트 내 필드를 필드 이름만으로 접근할 수 있게 함
### 기존에 Orange$age, Orange$circumference 형태로 적어야 했던 코드를 간단하게 필드 이름으로 접근 가능
with(Orange, {
print(mean(age))
print(mean(circumfrence))
})
print(mean(circumference))
### 1.with()
### 데이터 프레임 또는 리스트 내 필드를 필드 이름만으로 접근할 수 있게 함
### 기존에 Orange$age, Orange$circumference 형태로 적어야 했던 코드를 간단하게 필드 이름으로 접근 가능
with(Orange, {
print(mean(age))
print(mean(circumference))
})
### 1.with()
### 데이터 프레임 또는 리스트 내 필드를 필드 이름만으로 접근할 수 있게 함
### 기존에 Orange$age, Orange$circumference 형태로 적어야 했던 코드를 간단하게 필드 이름으로 접근 가능
with(Orange, {
print(mean(age))
print(mean(circumference))
})
### 2.within()
### within은 with와 비슷하지만 데이터 수정기능을 제공함
### 데이터가 결측치일 때, 이를 중앙값으로 치환한 예
(num<-data.frame(val=c(10,NA,20,30,NA,40,50)))
### 두개의 코드로 사용가능
num<-within(num,{val<-ifelse(is.na(val), median(val,na.rm = T),val)})
val
num$val[is.na(num$val)]<- median(num$val, na.rm = TRUE)
num
### 3.arrach(), detach()
### 함수 호출 후 모든 코드에서 컬럼들을 직접 접근할 수 있게 함
### Orange를 attach()했다가 detach()로 해제하는 예
Tree
attach(Orange)
Tree
detach(Orange)
Tree
### which()
### 조건에 만족하는 데이터의 행의 색인 자체를 반환
subset(Orange, Tree=="4")
which(Orange$Tree==4)
### 1.aggregate()
### 데이터를 분할하고 각 그룹마다 요약치를 계산
aggregate(age-circumference, Orange, mean)
### 1.aggregate()
### 데이터를 분할하고 각 그룹마다 요약치를 계산
aggregate(age~circumference, Orange, mean)
### stack() 데이터를 분할하고 각 그룹마다 요약치를 계산
a<-data.frame(x=c(1,4,7),
y=c(2,9,6),
z=c(4,3,1))
(stackedA<-stack(a))
### unstack() stack()을 통해 변환된 데이터를 원래 상태로 되돌리는데 사용
unstack(stackedA, values~ind)
