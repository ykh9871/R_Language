x
rm(x)
ls()
c(1*pi, 2*pi, 3*pi)
c("everone", "loves", "R")
C(TRUE, TRUE, TRUE, TRUE)
C(TRUE, TRUE, FALSE, TRUE)
v1<-c(1,2,3)
v2<-c(4,5,6)
c(v1,v2)
v3<-c("A","B","C")
c(v1,v3)
mode(3.1415)
1:5
9:0
seq(from=1, to=5, by=2)
rep(1, times=5)
s <- as.Date("2015-01-01")
e <- as.date("2015-01-15")
e <- as.Date("2015-01-15")
seq(s,e,1)
seq(from=s,by=1,length.out=7)
a <- 3
a==pi
a!=pi
a<pi
a>pi
a<=pi
a>=pi
fib <- c(0,1,1,2,3,5,8,13,21,34)
fib
fib[1] 첫 번째 원소는 1이다
fib[2]
fib[1]
fib[2]
fib[3]
fib[1:3]
fib[c(1,2,4,8)]
fib[-1]
fib < 10
fib[fib < 10]
years <- c(1960,1964,1976,1994)
names(years) <- c("Kenndey","Johnson","Carter","Clinton")
years
Kenndey Johnson Carter Clinton
years["Carter"]
years[c("Carter","Clinton")]
v <- c(11,12,13,14,15)
w <- c(1,2,3,4,5)
v+w
v-w
v*w
v/w
v^w
w-mean(w)
cv <- function(x) sd(x)/mean(x)
x <- c(1:10)
cv(x)
cv(1:10)
gcd <- function(a,b) {
+ if (b == 0) return(a)
+ else return(gcd(b, a %% b))
+ }
+ }
gcd <- function(a,b) {
if (b == 0) return(a)
else return(gcd(b, a %% b))
}
gcd(8,2)
getwd()
setwd("Rtest")
setwd ("Rtest")
getwd ()
getwd ()
setwd ("Rtest")
디렉토리 만들기 > Rtest
setwd ("Rtest")
setwd ("Rtest")
setwd ("Rtest")
getwd()
setwd("Rtest")
setwd ("Rtest")
getwd ()
getwd ()
getwd()
getwd()
#R의 작업공간 저장
save.image()
getwd ()
search()
#패키지에 있는 함수를 사용할 수 없는 경우
library(MASS)
detach(package:MASS)
require(doBy)
require(doBy)
require(doBy)
require(doBy)
require(doBy)
search()
#패키지에 있는 함수를 사용할 수 없는 경우
library(MASS)
detach(package:MASS)
require(doBy)
detach(package:MASS)
detach(package:MASS)
#패키지에 있는 함수를 사용할 수 없는 경우
library(MASS)
detach(package:MASS)
require(doBy)
detach(package:MASS)
require(MASS)
require(MASS)
search()
#패키지에 있는 함수를 사용할 수 없는 경우
library(MASS)
detach(package:MASS)
require(MASS)
require(doBy)
head(pressure)
help(pressure)
data()
head(Cars93)
library(MASS)
head(Cars93)
head(Cars93)
#컴퓨터에 설치된 패키지 목록
library()
installed.packages()[,c("Package", "Version")]
source("fibo3.R")
source("fibo3.R")
source("fibo3.R")
fibo <- function(n){
if (n == 1 || n == 2) {
return(1)
}else{
return(fibo(n-1)+fibo(n-2))
}
}
x <- fibo(3)
print(x)
source("fibo3.R")
source("fibo3")
source("fibo3.r")
fibo <- function(n){
if (n == 1 || n == 2) {
return(1)
}else{
return(fibo(n-1)+fibo(n-2))
}
}
x <- fibo(3)
print(x)
source("fibo3.R")
source("fibo3.r")
source("C:\Users\ykh98\OneDrive\바탕 화면\R_Studio\Day01\fibo3.r")
source("Day01\fibo3.r")
source("Day01\fibo3.r")
fibo <- function(n){
if (n == 1 || n == 2) {
return(1)
}else{
return(fibo(n-1)+fibo(n-2))
}
}
x <- fibo(3)
print(x)
source("fibo3.R")
source("/Day01/fibo3.R")
source("./Day01/fibo3.R")
source("./Day01/fibo3.R")
#변수, 자료형
Data(a, b, c =3, d=4)
Data(1,2)
#변수, 자료형
Data(a, b, c =3, d=4)
#변수, 자료형
a<-3, b<<-3,c=3
#변수, 자료형
a<-3
#변수, 자료형
a<-3
b<<-3
c=3
Data(a, b, c =3, d=4)
d<-4
Data(a, b, c =3, d=4)
Data(1,2)
Data(a, b, c =3, d=4)
#변수, 자료형
install.packages("dplyr")  # 패키지 설치
library(dplyr)            # 패키지 로드
#변수, 자료형
install.packages("dplyr")  # 패키지 설치
library(dplyr)            # 패키지 로드
Data(a, b, c =3, d=4)
library(dplyr)            # 패키지 로드
#변수, 자료형
install.packages("dplyr")  # 패키지 설치
library(dplyr)            # 패키지 로드
#변수, 자료형
install.packages("dplyr")  # 패키지 설치
library(dplyr)            # 패키지 로드
#변수, 자료형
install.packages("dplyr")  # 패키지 설치
library(dplyr)            # 패키지 로드
#변수, 자료형
install.packages("dplyr")  # 패키지 설치
#변수, 자료형
install.packages("dplyr")  # 패키지 설치
library(dplyr)            # 패키지 로드
library()            # 패키지 로드
#변수, 자료형
a<-3
b<<-3
c=3
d<-4
Data(a, b, c =3, d=4)
#변수, 자료형
a<-3
b<<-3
c=3
d<-4
Data(a, b, c =3, d=4)
install.packages("dplyr")
library(dplyr)
library(dplyr)
library(dplyr)
Data(a, b, c =3, d=4)
Data(1,2)
library(dplyr)
Data(1,2)
Data(a, b, c =3, d=4)
Data(1,2)
library(Data)
library()
Data(1,2)
#스칼라 숫자
x<-4
y<-6.5
z<-x+y
print(z)
z
#스칼라 NA와 Null
num1<-95
#스칼라 NA와 Null
num1<-95
num2<-88
num3<-77
num4<-NA
is.na(num4)
is.null(a)
a<-NULL
is.null(a)
#스칼라 문자열
x<- "Hello world!"
print(x)
x<
x<- 'Hello World!'
x<- 'Hello World!'
print(x)
#스칼라 진릿값
TRUE & TRUE
TRUE & FALSE
TRUE | TRUE
TRUE | FALSE
TRUE
!TRUE
!FALSE
TRUE<-FALSE
c(TRUE, TRUE) & c(TRUE, FALSE)
c(TRUE, TRUE) && c(TRUE, FALSE)
#스칼라 팩터
f<-factor("s", c("s","t"))
f
nlevels(f)
levels(f)
ordered("x", c("x", "y", "z"))
#스칼라 벡터
(a<-c(10, 20, 30, 40)) > c(10, 20, 39)
#스칼라 벡터
(a<-c(10, 20, 30, 40))
c(10, 20, 39)
c(10, 20, 30)
c(10, 20,30,c(10,20,30))
a<-c(10,20,30)
names(a)<-c("lee", "park", "choi")
a
##벡터 데이터 접근
a<-c("x","y","z")
a[1]
a[2]
a[-3]
a[-1]
a[c(1,2)]
a[c(2,3)]
a[1:2]
a[2:3]
##벡터 연산자
"x" %in% c("x","y","z")
"w" %in% c("x","y","Z")
a<-c(10,20,30,40)
a+1
10-a
##벡터 시퀀스 생성
seq(1,5)
seq(1,5,2)
seq(1,5,3)
1:5
5:1
##벡터 반복된 값 저장
rep(1:2, times=4)
rep(1:2, each=4)
rep(1:2, each=4, times=2)
# 5.리스트
## 1.리스트 생성
(a<- list(names = "Data", num=100))
(a<- list(names = "Data", num= c(10,20,30)))
# 6.행렬
## 1.행렬 생성
matrix(c(10,20,30,40), nrow = 2)
matrix(c(10,20,30,40), ncol = 2)
a <- matrix(1:4, ncol = 2)
rownames(a) # 행 이름이 없으므로 NULL반환
rownames(a)  <- c("one", "two")
a
colnames(a)  <- c("one", "two")
a
### 1. 행 우선으로 지정하여 행렬생성
matrix(c(1:9), nrow = 3, byrow = TRUE)
### 2. 행과 열에 명칭 부여하기
matrix(1:9, nrow = 3, dimnames = list(c("A", "B", "C"), c("D", "E", "F")))
require(doBy)
install.packages(doBy)
## 2. 데이터 접근
(a  <- matrix(c(1:9), ncol = 3))
a[1,2]
a[3,1]
a[2:3,] #2,3행의 데이터를 가져옴
a[, 1:2]
## 3. 행렬연산
(a  <- matrix(c(1:9), ncol = 3))
a*3
a/2
a+a+a
a-a
a%%a
## 3. 행렬연산
(a  <- matrix(c(1:9), ncol = 3))
a%%a
## 3. 행렬연산
(a  <- matrix(c(1:9), ncol = 3))
a%%a
a%*%a
# 7.배열
## 1.배열 생성
array(11:22, dim = c(2,5)) #2*5 차원의 배열
# 8.데이터프레임
## 1.생성
(a <- data.frame(x=c(1,2,3,4,5), y=c(6,7,8,9,10)))
(a <- data.frame(x=c(1,2,3,4,5), y=c(6,7,8,9,10), z=c("s","f","s","f","s")))
str(a)
a$x
a$x <- 11:15
a
### 새로운 컬럼 추가하기
a$w <-c(1:5)
a
### 행, 컬럼 이름 지정하기
colnames(a)  <- c("num1", "num2","num3","num4")
a
rownames(a) <- c(6:10)
a
## 2. 접근예제
### 프레임에 접근하기
a
a$x
a[2,]
a[2,1]
### 색인 지정 및 제외 할 컬럼 설정하기
a[c(1,3),2]
a[-2.-2]
### 컬럼 이름 지정하기
a[,c("x","y")]
a[,c("x")]
### drop 옵션 사용(형 변환 원치 않을 때)
a[,c("x"),drop=FALSE]
# 8.데이터프레임
## 1. 생성 예제
### 데이터 프레임 생성
(a <- data.frame(x=c(1,2,3,4,5), y=c(6,7,8,9,10)))
### 팩터 컬럼 z 추가
(a <- data.frame(x=c(1,2,3,4,5), y=c(6,7,8,9,10), z=c("s","f","s","f","s")))
### drop 옵션 사용(형 변환 원치 않을 때)
a[,c("x"),drop=FALSE]
### 특정 컬럼 선택하기
(a <-data.frame(x=1:3, y=4:6, z=7:9))
a[,names(a)%in% c("y", "z")]
### 연산자 사용해서 특정 컬럼 선택하기
a[, !names(a) %in% c("x")]
## 3. 유틸리티 함수
a <-data.frame(x=1:100)
head(a)
tail(a)
head(a,20L)
### View()를 이용한 데이터 출력
View(a)
# 9.타입 판별
## 1.예제
### 클래스 구하기
class(c(10,20))
class(matrix(c(10,20)))
class(data.frame(a=c(10,20),b=c(30,40)))
### 데이터 타입 판별하기
is.factor(factor(c('a','b')))
is.numeric(1)
is.character(c("a","b"))
is.data.frame(data.frame(a=1:5))
# 10.타입 변환
## 1.예제
### 문자열 벡터를 팩터로 변환 후, 다시 벡터로 변환하기
a <-c("x","y","z")
as.factor(a)
as.character(as.factor(a))
### 행렬을 데이터 프레임으로 변환하기
a <- matrix(1:4, ncol = 2)
as.data.frame(a)
(x <-data.frame(matrix(c(1:4), ncol = 2)))
### 리스트를 데이터 프레임으로 변환
data.frame(list(x=c(1:3), y=c(4:6)))
source("C:/Yoongit/R_Language/R_Studio/Day01/R_basic2.R", echo=TRUE)
## 1.흐름 제어
### 흐름 제어 예시
if(TRUE){
print("참")
print("HELLO")
}else{
print("거짓")
print("WORLD")
}
### ifelse()사용 예
x <- c(6,7,8,9,10)
ifelse(x %% 2 ==1, "홀수", "짝수")
print(a)
print(result)
result = 3*a
for(a in 1:9){
result = 3*a
print(result)
}
### while문 예제
a <- 1
a <- a+1
while (a<=10) {
print(a)
a <- a+1
}
a <- a+1
while (a < 10) {
result = 3*a
print(result)
a <- a+1
}
a <- 1
while (a < 10) {
result = 3*a
print(result)
a <- a+1
}
while (i<= 15) {
i <- i + 1
if (i %% 3 != 0){
next #print()를 실행하지 않고while문의 처음으로 감
}
print(i)
}
### while문 에서 next 사용
i <- 0
while (i<= 15) {
i <- i + 1
if (i %% 3 != 0){
next #print()를 실행하지 않고while문의 처음으로 감
}
print(i)
}
### repeat 사용 예
a <- 11
repeat{
print(a)
if(a>=20){
break
}
a <- a+1
}
# 2.연산
## 1. 벡터연산
### 벡터 연산은 벡터 또는 리스트를 한번에 연산하는 것을 의미
### 벡터 간의 연산도 가능
a <- c(1,3,5,7,9)
a + 2
#벡터간 연산
a <- c(1,3,5,7,9)
a + a
a==a
a==c(1,3,5,7,7)
source("C:/Yoongit/R_Language/R_Studio/Day01/R_basic2.R", echo=TRUE)
### 벡터 연산시 개수가 다를 경우 경고 발생
x <- c(1,3,5,7,9)
y <- c(2,2,2,2,2,2,2,2)
x+y
### 데이터에 NA 포함된 경우, 결과가 항상 NA로 변경됨
### 따라서 NA처리 함수 필요
### NA는 누락 된 값 지시자를 포함하는 길이 1의 논리 상
